# Common environment variables for all workflows
# These can be overridden by API calls with dynamic values
# Proper handling of API data with null/default values for optional fields
environment: &default_env
  flutter: stable
  xcode: latest
  cocoapods: default
  vars:
    # App Configuration - Required from API
    VERSION_NAME: "${VERSION_NAME}"
    VERSION_CODE: "${VERSION_CODE}"
    APP_NAME: "${APP_NAME}"
    ORG_NAME: "${ORG_NAME}"
    WEB_URL: "${WEB_URL}"
    PKG_NAME: "${PKG_NAME}"
    BUNDLE_ID: "${BUNDLE_ID}"
    EMAIL_ID: "${EMAIL_ID}"

    # Feature Flags - API configurable with proper defaults
    PUSH_NOTIFY: "${PUSH_NOTIFY}"
    IS_CHATBOT: "${IS_CHATBOT}"
    IS_DEEPLINK: "${IS_DEEPLINK}"
    IS_SPLASH: "${IS_SPLASH}"
    IS_PULLDOWN: "${IS_PULLDOWN}"
    IS_BOTTOMMENU: "${IS_BOTTOMMENU}"
    IS_LOAD_IND: "${IS_LOAD_IND}"

    # Assets - API configurable with empty defaults for optional fields
    LOGO_URL: "${LOGO_URL}"
    SPLASH: "${SPLASH}"
    SPLASH_BG: "${SPLASH_BG}"
    SPLASH_BG_COLOR: "${SPLASH_BG_COLOR}"
    SPLASH_TAGLINE: "${SPLASH_TAGLINE}"
    SPLASH_TAGLINE_COLOR: "${SPLASH_TAGLINE_COLOR}"
    SPLASH_ANIMATION: "${SPLASH_ANIMATION}"
    SPLASH_DURATION: "${SPLASH_DURATION}"

    # Bottom Menu Configuration - API configurable with empty defaults
    BOTTOMMENU_ITEMS: "${BOTTOMMENU_ITEMS}"
    BOTTOMMENU_BG_COLOR: "${BOTTOMMENU_BG_COLOR}"
    BOTTOMMENU_ICON_COLOR: "${BOTTOMMENU_ICON_COLOR}"
    BOTTOMMENU_TEXT_COLOR: "${BOTTOMMENU_TEXT_COLOR}"
    BOTTOMMENU_FONT: "${BOTTOMMENU_FONT}"
    BOTTOMMENU_FONT_SIZE: "${BOTTOMMENU_FONT_SIZE}"
    BOTTOMMENU_FONT_BOLD: "${BOTTOMMENU_FONT_BOLD}"
    BOTTOMMENU_FONT_ITALIC: "${BOTTOMMENU_FONT_ITALIC}"
    BOTTOMMENU_ACTIVE_TAB_COLOR: "${BOTTOMMENU_ACTIVE_TAB_COLOR}"
    BOTTOMMENU_ICON_POSITION: "${BOTTOMMENU_ICON_POSITION}"
    BOTTOMMENU_VISIBLE_ON: "${BOTTOMMENU_VISIBLE_ON}"

    # Firebase Configuration - API required for push notifications
    firebase_config_android: "https://raw.githubusercontent.com/prasanna91/QuikApp/main/google-services-gc.json"
    firebase_config_ios: "https://raw.githubusercontent.com/prasanna91/QuikApp/main/GoogleService-Info-gc.plist"

    # iOS Configuration - API required for iOS builds
    APPLE_TEAM_ID: "${APPLE_TEAM_ID}"
    APNS_KEY_ID: "${APNS_KEY_ID}"
    APNS_AUTH_KEY_URL: "${APNS_AUTH_KEY_URL}"
    CERT_PASSWORD: "${CERT_PASSWORD}"
    PROFILE_URL: "${PROFILE_URL}"
    CERT_CER_URL: "${CERT_CER_URL}"
    CERT_KEY_URL: "${CERT_KEY_URL}"
    APP_STORE_CONNECT_KEY_IDENTIFIER: "${APP_STORE_CONNECT_KEY_IDENTIFIER}"
    IPHONEOS_DEPLOYMENT_TARGET: "13.0"
    COCOAPODS_PLATFORM: "ios"
    EXPORT_METHOD: "app-store"
    IS_DEVELOPMENT_PROFILE: "false"
    IS_PRODUCTION_PROFILE: "true"

    # Android Configuration - API required for Android builds
    KEY_STORE: "${KEY_STORE}"
    CM_KEYSTORE_PASSWORD: "${CM_KEYSTORE_PASSWORD}"
    CM_KEY_ALIAS: "${CM_KEY_ALIAS}"
    CM_KEY_PASSWORD: "${CM_KEY_PASSWORD}"
    COMPILE_SDK_VERSION: "35"
    MIN_SDK_VERSION: "21"
    TARGET_SDK_VERSION: "35"

    # Permissions - API configurable with secure defaults (all false unless specified)
    IS_CAMERA: "${IS_CAMERA}"
    IS_LOCATION: "${IS_LOCATION}"
    IS_MIC: "${IS_MIC}"
    IS_NOTIFICATION: "${IS_NOTIFICATION}"
    IS_CONTACT: "${IS_CONTACT}"
    IS_BIOMETRIC: "${IS_BIOMETRIC}"
    IS_CALENDAR: "${IS_CALENDAR}"
    IS_STORAGE: "${IS_STORAGE}"

    # iOS Permissions - API configurable with defaults
    IS_PHOTO_LIBRARY: "${IS_PHOTO_LIBRARY}"
    IS_PHOTO_LIBRARY_ADD: "${IS_PHOTO_LIBRARY_ADD}"
    IS_FACE_ID: "${IS_FACE_ID}"
    IS_TOUCH_ID: "${IS_TOUCH_ID}"

    # Email Configuration - Loaded from lib/scripts/email_config.sh
    # API can override these values when database is ready
    # For now, using defaults from email_config.sh
    EMAIL_CONFIG_SOURCE: "lib/scripts/email_config.sh"

scripts:
  - &debug_env
    name: Debug Environment Variables
    script: |
      #!/usr/bin/env bash
      set -e
      echo "üîç Debugging environment variables..."

      # Function to safely print sensitive variables
      print_var() {
        local var_name=$1
        local var_value=${!var_name}
        if [[ $var_name == *"PASSWORD"* ]] || [[ $var_name == *"KEY"* ]]; then
          echo "$var_name: [REDACTED]"
        else
          echo "$var_name: $var_value"
        fi
      }

      echo "*********** App Name & Version ***********"
      print_var "APP_NAME"
      print_var "ORG_NAME"
      print_var "WEB_URL"
      print_var "VERSION_NAME"
      print_var "VERSION_CODE"
      print_var "PKG_NAME"
      print_var "BUNDLE_ID"

      echo "*********** App Customization Configuration ***********"
      print_var "IS_SPLASH"
      print_var "IS_PULLDOWN"
      print_var "IS_LOAD_IND"
      print_var "IS_BOTTOMMENU"
      print_var "IS_DEEPLINK"

      echo "*********** Push Notification Configuration ***********"
      print_var "PUSH_NOTIFY"
      print_var "IS_CHATBOT"

      echo "*********** Android Configuration ***********"
      print_var "KEY_STORE"
      print_var "CM_KEYSTORE_PASSWORD"
      print_var "CM_KEY_ALIAS"
      print_var "CM_KEY_PASSWORD"
      print_var "COMPILE_SDK_VERSION"
      print_var "MIN_SDK_VERSION"
      print_var "TARGET_SDK_VERSION"

      echo "*********** iOS Configuration ***********"
      print_var "APP_STORE_CONNECT_KEY_IDENTIFIER"
      print_var "APNS_KEY_ID"
      print_var "APPLE_TEAM_ID"
      print_var "APNS_AUTH_KEY_URL"
      print_var "IPHONEOS_DEPLOYMENT_TARGET"
      print_var "EXPORT_METHOD"

      echo "*********** Firebase Configuration ***********"
      print_var "firebase_config_android"
      print_var "firebase_config_ios"

      echo "*********** Splash Configuration ***********"
      print_var "SPLASH"
      print_var "SPLASH_BG"
      print_var "SPLASH_BG_COLOR"
      print_var "SPLASH_TAGLINE"
      print_var "SPLASH_TAGLINE_COLOR"
      print_var "SPLASH_ANIMATION"
      print_var "SPLASH_DURATION"

      echo "*********** Bottom Navigation Configuration ***********"
      print_var "BOTTOMMENU_ITEMS"
      print_var "BOTTOMMENU_BG_COLOR"
      print_var "BOTTOMMENU_ICON_COLOR"
      print_var "BOTTOMMENU_TEXT_COLOR"
      print_var "BOTTOMMENU_FONT"
      print_var "BOTTOMMENU_FONT_SIZE"
      print_var "BOTTOMMENU_FONT_BOLD"
      print_var "BOTTOMMENU_FONT_ITALIC"
      print_var "BOTTOMMENU_ACTIVE_TAB_COLOR"
      print_var "BOTTOMMENU_ICON_POSITION"
      print_var "BOTTOMMENU_VISIBLE_ON"

      echo "*********** Permissions ***********"
      print_var "IS_CAMERA"
      print_var "IS_LOCATION"
      print_var "IS_MIC"
      print_var "IS_NOTIFICATION"
      print_var "IS_CONTACT"
      print_var "IS_BIOMETRIC"
      print_var "IS_CALENDAR"
      print_var "IS_STORAGE"
      print_var "IS_PHOTO_LIBRARY"
      print_var "IS_PHOTO_LIBRARY_ADD"
      print_var "IS_FACE_ID"
      print_var "IS_TOUCH_ID"

      echo "*********** Email Configuration ***********"
      print_var "EMAIL_ID"
      print_var "SMTP_SERVER"
      print_var "SMTP_PORT"
      print_var "SMTP_USERNAME"
      print_var "SMTP_PASSWORD"

      echo "‚úÖ Environment variables debug complete"

workflows:
  android-publish:
    name: Android Publish
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      vars:
        # App Configuration - Required from API
        VERSION_NAME: "${VERSION_NAME}"
        VERSION_CODE: "${VERSION_CODE}"
        APP_NAME: "${APP_NAME}"
        ORG_NAME: "${ORG_NAME}"
        WEB_URL: "${WEB_URL}"
        PKG_NAME: "${PKG_NAME}"
        BUNDLE_ID: "${BUNDLE_ID}"
        EMAIL_ID: "${EMAIL_ID}"

        # Feature Flags - API configurable with proper defaults
        PUSH_NOTIFY: "${PUSH_NOTIFY}"
        IS_CHATBOT: "${IS_CHATBOT}"
        IS_DEEPLINK: "${IS_DEEPLINK}"
        IS_SPLASH: "${IS_SPLASH}"
        IS_PULLDOWN: "${IS_PULLDOWN}"
        IS_BOTTOMMENU: "${IS_BOTTOMMENU}"
        IS_LOAD_IND: "${IS_LOAD_IND}"

        # Assets - API configurable with empty defaults for optional fields
        LOGO_URL: "${LOGO_URL}"
        SPLASH: "${SPLASH}"
        SPLASH_BG: "${SPLASH_BG}"
        SPLASH_BG_COLOR: "${SPLASH_BG_COLOR}"
        SPLASH_TAGLINE: "${SPLASH_TAGLINE}"
        SPLASH_TAGLINE_COLOR: "${SPLASH_TAGLINE_COLOR}"
        SPLASH_ANIMATION: "${SPLASH_ANIMATION}"
        SPLASH_DURATION: "${SPLASH_DURATION}"

        # Bottom Menu Configuration - API configurable with empty defaults
        BOTTOMMENU_ITEMS: "${BOTTOMMENU_ITEMS}"
        BOTTOMMENU_BG_COLOR: "${BOTTOMMENU_BG_COLOR}"
        BOTTOMMENU_ICON_COLOR: "${BOTTOMMENU_ICON_COLOR}"
        BOTTOMMENU_TEXT_COLOR: "${BOTTOMMENU_TEXT_COLOR}"
        BOTTOMMENU_FONT: "${BOTTOMMENU_FONT}"
        BOTTOMMENU_FONT_SIZE: "${BOTTOMMENU_FONT_SIZE}"
        BOTTOMMENU_FONT_BOLD: "${BOTTOMMENU_FONT_BOLD}"
        BOTTOMMENU_FONT_ITALIC: "${BOTTOMMENU_FONT_ITALIC}"
        BOTTOMMENU_ACTIVE_TAB_COLOR: "${BOTTOMMENU_ACTIVE_TAB_COLOR}"
        BOTTOMMENU_ICON_POSITION: "${BOTTOMMENU_ICON_POSITION}"
        BOTTOMMENU_VISIBLE_ON: "${BOTTOMMENU_VISIBLE_ON}"

        # Firebase Configuration - API required for push notifications
        FIREBASE_CONFIG_ANDROID: "${firebase_config_android}"
        FIREBASE_CONFIG_IOS: "${firebase_config_ios}"

        # Android Configuration - API required for Android builds
        KEY_STORE: "${KEY_STORE}"
        CM_KEYSTORE_PASSWORD: "${CM_KEYSTORE_PASSWORD}"
        CM_KEY_ALIAS: "${CM_KEY_ALIAS}"
        CM_KEY_PASSWORD: "${CM_KEY_PASSWORD}"
        COMPILE_SDK_VERSION: "35"
        MIN_SDK_VERSION: "21"
        TARGET_SDK_VERSION: "35"

        # Permissions - API configurable with secure defaults (all false unless specified)
        IS_CAMERA: "${IS_CAMERA}"
        IS_LOCATION: "${IS_LOCATION}"
        IS_MIC: "${IS_MIC}"
        IS_NOTIFICATION: "${IS_NOTIFICATION}"
        IS_CONTACT: "${IS_CONTACT}"
        IS_BIOMETRIC: "${IS_BIOMETRIC}"
        IS_CALENDAR: "${IS_CALENDAR}"
        IS_STORAGE: "${IS_STORAGE}"

        # Email Configuration - Optional with defaults
        SMTP_SERVER: "smtp.gmail.com"
        SMTP_PORT: "587"
        SMTP_USERNAME: "prasannasrie@gmail.com"
        SMTP_PASSWORD: "jbbf nzhm zoay lbwb"
    scripts:
      - name: Setup Build Environment
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîß Setting up build environment..."

          # Make all scripts executable
          find lib/scripts -type f -name "*.sh" -exec chmod +x {} \;

          # Create output directory
          mkdir -p output

          # Set workflow name for email notifications
          export WORKFLOW_NAME="Android Publish"

          # Source environment variables
          source lib/scripts/combined/export.sh

          echo "‚úÖ Build environment setup complete"
      - name: Validate Environment
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîç Validating environment..."

          # Run validation script
          bash lib/scripts/combined/validate.sh

          echo "‚úÖ Environment validation complete"
      - name: Configure App Details
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîß Configuring app details..."

          # Update app name in Android
          sed -i '' "s/android:label=\"[^\"]*\"/android:label=\"$APP_NAME\"/" android/app/src/main/AndroidManifest.xml

          # Update package name in Android
          sed -i '' "s/applicationId \"[^\"]*\"/applicationId \"$PKG_NAME\"/" android/app/build.gradle

          # Download and setup app icon
          if [ -n "$LOGO_URL" ]; then
            echo "üì• Downloading app icon..."
            wget -O assets/icon.png "$LOGO_URL"
            flutter pub add flutter_launcher_icons
            flutter pub run flutter_launcher_icons
          fi

          # Download and setup splash screen
          if [ "$IS_SPLASH" = "true" ]; then
            echo "üì• Downloading splash assets..."
            if [ -n "$SPLASH" ]; then
              wget -O assets/splash.png "$SPLASH"
            fi
            if [ -n "$SPLASH_BG" ]; then
              wget -O assets/splash_bg.png "$SPLASH_BG"
            fi
            flutter pub add flutter_native_splash
            flutter pub run flutter_native_splash:create
          fi

          echo "‚úÖ App configuration complete"
      - name: Run Android Build
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üöÄ Running Android build process..."

          # Run the main combined build script
          bash lib/scripts/combined/main.sh

          echo "‚úÖ Android build process completed"
      - name: Revert Changes
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîÑ Reverting project changes..."

          # Revert AndroidManifest.xml
          git checkout android/app/src/main/AndroidManifest.xml

          # Revert build.gradle
          git checkout android/app/build.gradle

          # Remove downloaded assets
          rm -f assets/icon.png
          rm -f assets/splash.png
          rm -f assets/splash_bg.png

          # Remove generated files
          rm -f pubspec.yaml.bak
          rm -rf android/app/src/main/res/mipmap-*
          rm -rf android/app/src/main/res/drawable-*

          echo "‚úÖ Project changes reverted"
      - name: Send Build Notification
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üìß Sending build notification..."

          # Send email notification
          bash lib/scripts/combined/send_error_email.sh "Build Complete" "Android build process completed successfully"

          echo "‚úÖ Build notification sent"
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - output/
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: false
          failure: false

  ios-publish:
    name: iOS Publish
    environment: *default_env
    scripts:
      - name: Setup Build Environment
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîß Setting up build environment..."

          # Make all scripts executable
          find lib/scripts -type f -name "*.sh" -exec chmod +x {} \;

          # Create output directory
          mkdir -p output

          # Set workflow name for email notifications
          export WORKFLOW_NAME="iOS Publish"

          # Source environment variables
          source lib/scripts/combined/export.sh

          echo "‚úÖ Build environment setup complete"
      - name: Validate Environment
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîç Validating environment..."

          # Run validation script
          bash lib/scripts/combined/validate.sh

          echo "‚úÖ Environment validation complete"
      - name: Configure App Details
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîß Configuring app details..."

          # Update app name in iOS
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName $APP_NAME" ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleName $APP_NAME" ios/Runner/Info.plist

          # Update bundle identifier in iOS
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" ios/Runner/Info.plist

          # Download and setup app icon
          if [ -n "$LOGO_URL" ]; then
            echo "üì• Downloading app icon..."
            wget -O assets/icon.png "$LOGO_URL"
            flutter pub add flutter_launcher_icons
            flutter pub run flutter_launcher_icons
          fi

          # Download and setup splash screen
          if [ "$IS_SPLASH" = "true" ]; then
            echo "üì• Downloading splash assets..."
            if [ -n "$SPLASH" ]; then
              wget -O assets/splash.png "$SPLASH"
            fi
            if [ -n "$SPLASH_BG" ]; then
              wget -O assets/splash_bg.png "$SPLASH_BG"
            fi
            flutter pub add flutter_native_splash
            flutter pub run flutter_native_splash:create
          fi

          echo "‚úÖ App configuration complete"
      - name: Run iOS Build
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üöÄ Running iOS build process..."

          # Run the main combined build script
          bash lib/scripts/combined/main.sh

          echo "‚úÖ iOS build process completed"
      - name: Revert Changes
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîÑ Reverting project changes..."

          # Revert Info.plist
          git checkout ios/Runner/Info.plist

          # Remove downloaded assets
          rm -f assets/icon.png
          rm -f assets/splash.png
          rm -f assets/splash_bg.png

          # Remove generated files
          rm -f pubspec.yaml.bak
          rm -rf ios/Runner/Assets.xcassets/AppIcon.appiconset/*
          rm -rf ios/Runner/Assets.xcassets/Splash.imageset/*

          echo "‚úÖ Project changes reverted"
      - name: Send Build Notification
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üìß Sending build notification..."

          # Send email notification
          bash lib/scripts/combined/send_error_email.sh "Build Complete" "iOS build process completed successfully"

          echo "‚úÖ Build notification sent"
    artifacts:
      - build/ios/ipa/Runner.ipa
      - build/ios/archive/Runner.xcarchive
      - output/
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: false
          failure: false

  combined-workflow:
    name: Combined Android & iOS Build
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
      node: v18.17.0
      java: 17
      groups:
        - google_credentials
        - appstore_credentials
      vars:
        # App Configuration - Required from API
        VERSION_NAME: "${VERSION_NAME}"
        VERSION_CODE: "${VERSION_CODE}"
        APP_NAME: "${APP_NAME}"
        ORG_NAME: "${ORG_NAME}"
        WEB_URL: "${WEB_URL}"
        PKG_NAME: "${PKG_NAME}"
        BUNDLE_ID: "${BUNDLE_ID}"
        EMAIL_ID: "${EMAIL_ID}"

        # Feature Flags - API configurable with proper defaults
        PUSH_NOTIFY: "${PUSH_NOTIFY}"
        IS_CHATBOT: "${IS_CHATBOT}"
        IS_DEEPLINK: "${IS_DEEPLINK}"
        IS_SPLASH: "${IS_SPLASH}"
        IS_PULLDOWN: "${IS_PULLDOWN}"
        IS_BOTTOMMENU: "${IS_BOTTOMMENU}"
        IS_LOAD_IND: "${IS_LOAD_IND}"

        # Assets - API configurable with empty defaults for optional fields
        LOGO_URL: "${LOGO_URL}"
        SPLASH: "${SPLASH}"
        SPLASH_BG: "${SPLASH_BG}"
        SPLASH_BG_COLOR: "${SPLASH_BG_COLOR}"
        SPLASH_TAGLINE: "${SPLASH_TAGLINE}"
        SPLASH_TAGLINE_COLOR: "${SPLASH_TAGLINE_COLOR}"
        SPLASH_ANIMATION: "${SPLASH_ANIMATION}"
        SPLASH_DURATION: "${SPLASH_DURATION}"

        # Bottom Menu Configuration - API configurable with empty defaults
        BOTTOMMENU_ITEMS: "${BOTTOMMENU_ITEMS}"
        BOTTOMMENU_BG_COLOR: "${BOTTOMMENU_BG_COLOR}"
        BOTTOMMENU_ICON_COLOR: "${BOTTOMMENU_ICON_COLOR}"
        BOTTOMMENU_TEXT_COLOR: "${BOTTOMMENU_TEXT_COLOR}"
        BOTTOMMENU_FONT: "${BOTTOMMENU_FONT}"
        BOTTOMMENU_FONT_SIZE: "${BOTTOMMENU_FONT_SIZE}"
        BOTTOMMENU_FONT_BOLD: "${BOTTOMMENU_FONT_BOLD}"
        BOTTOMMENU_FONT_ITALIC: "${BOTTOMMENU_FONT_ITALIC}"
        BOTTOMMENU_ACTIVE_TAB_COLOR: "${BOTTOMMENU_ACTIVE_TAB_COLOR}"
        BOTTOMMENU_ICON_POSITION: "${BOTTOMMENU_ICON_POSITION}"
        BOTTOMMENU_VISIBLE_ON: "${BOTTOMMENU_VISIBLE_ON}"

        # Firebase Configuration - API required for push notifications
        FIREBASE_CONFIG_ANDROID: "${firebase_config_android}"
        FIREBASE_CONFIG_IOS: "${firebase_config_ios}"

        # iOS Configuration - API required for iOS builds
        APPLE_TEAM_ID: "${APPLE_TEAM_ID}"
        APNS_KEY_ID: "${APNS_KEY_ID}"
        APNS_AUTH_KEY_URL: "${APNS_AUTH_KEY_URL}"
        CERT_PASSWORD: "${CERT_PASSWORD}"
        PROFILE_URL: "${PROFILE_URL}"
        CERT_CER_URL: "${CERT_CER_URL}"
        CERT_KEY_URL: "${CERT_KEY_URL}"
        APP_STORE_CONNECT_KEY_IDENTIFIER: "${APP_STORE_CONNECT_KEY_IDENTIFIER}"
        IPHONEOS_DEPLOYMENT_TARGET: "13.0"
        COCOAPODS_PLATFORM: "ios"
        EXPORT_METHOD: "app-store"
        IS_DEVELOPMENT_PROFILE: "false"
        IS_PRODUCTION_PROFILE: "true"

        # Android Configuration - API required for Android builds
        KEY_STORE: "${KEY_STORE}"
        CM_KEYSTORE_PASSWORD: "${CM_KEYSTORE_PASSWORD}"
        CM_KEY_ALIAS: "${CM_KEY_ALIAS}"
        CM_KEY_PASSWORD: "${CM_KEY_PASSWORD}"
        COMPILE_SDK_VERSION: "35"
        MIN_SDK_VERSION: "21"
        TARGET_SDK_VERSION: "35"

        # Permissions - API configurable with secure defaults (all false unless specified)
        IS_CAMERA: "${IS_CAMERA}"
        IS_LOCATION: "${IS_LOCATION}"
        IS_MIC: "${IS_MIC}"
        IS_NOTIFICATION: "${IS_NOTIFICATION}"
        IS_CONTACT: "${IS_CONTACT}"
        IS_BIOMETRIC: "${IS_BIOMETRIC}"
        IS_CALENDAR: "${IS_CALENDAR}"
        IS_STORAGE: "${IS_STORAGE}"

        # iOS Permissions - API configurable with defaults
        IS_PHOTO_LIBRARY: "${IS_PHOTO_LIBRARY}"
        IS_PHOTO_LIBRARY_ADD: "${IS_PHOTO_LIBRARY_ADD}"
        IS_FACE_ID: "${IS_FACE_ID}"
        IS_TOUCH_ID: "${IS_TOUCH_ID}"

        # Email Configuration - Optional with defaults
        SMTP_SERVER: "smtp.gmail.com"
        SMTP_PORT: "587"
        SMTP_USERNAME: "prasannasrie@gmail.com"
        SMTP_PASSWORD: "jbbf nzhm zoay lbwb"
    scripts:
      - name: Setup Build Environment
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîß Setting up build environment..."

          # Make all scripts executable
          find lib/scripts -type f -name "*.sh" -exec chmod +x {} \;

          # Create output directory
          mkdir -p output

          # Set workflow name for email notifications
          export WORKFLOW_NAME="Combined Android & iOS Build"

          # Source environment variables
          source lib/scripts/combined/export.sh

          echo "‚úÖ Build environment setup complete"
      - name: Validate Environment
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîç Validating environment..."

          # Run validation script
          bash lib/scripts/combined/validate.sh

          echo "‚úÖ Environment validation complete"
      - name: Configure App Details
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîß Configuring app details..."

          # Update app name in Android
          sed -i '' "s/android:label=\"[^\"]*\"/android:label=\"$APP_NAME\"/" android/app/src/main/AndroidManifest.xml

          # Update package name in Android
          sed -i '' "s/applicationId \"[^\"]*\"/applicationId \"$PKG_NAME\"/" android/app/build.gradle

          # Update app name in iOS
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName $APP_NAME" ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleName $APP_NAME" ios/Runner/Info.plist

          # Update bundle identifier in iOS
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" ios/Runner/Info.plist

          # Download and setup app icon
          if [ -n "$LOGO_URL" ]; then
            echo "üì• Downloading app icon..."
            wget -O assets/icon.png "$LOGO_URL"
            flutter pub add flutter_launcher_icons
            flutter pub run flutter_launcher_icons
          fi

          # Download and setup splash screen
          if [ "$IS_SPLASH" = "true" ]; then
            echo "üì• Downloading splash assets..."
            if [ -n "$SPLASH" ]; then
              wget -O assets/splash.png "$SPLASH"
            fi
            if [ -n "$SPLASH_BG" ]; then
              wget -O assets/splash_bg.png "$SPLASH_BG"
            fi
            flutter pub add flutter_native_splash
            flutter pub run flutter_native_splash:create
          fi

          echo "‚úÖ App configuration complete"
      - name: Run Combined Build
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üöÄ Running combined build process..."

          # Run the main combined build script
          bash lib/scripts/combined/main.sh

          echo "‚úÖ Combined build process completed"
      - name: Revert Changes
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üîÑ Reverting project changes..."

          # Revert Android files
          git checkout android/app/src/main/AndroidManifest.xml
          git checkout android/app/build.gradle

          # Revert iOS files
          git checkout ios/Runner/Info.plist

          # Remove downloaded assets
          rm -f assets/icon.png
          rm -f assets/splash.png
          rm -f assets/splash_bg.png

          # Remove generated files
          rm -f pubspec.yaml.bak
          rm -rf android/app/src/main/res/mipmap-*
          rm -rf android/app/src/main/res/drawable-*
          rm -rf ios/Runner/Assets.xcassets/AppIcon.appiconset/*
          rm -rf ios/Runner/Assets.xcassets/Splash.imageset/*

          echo "‚úÖ Project changes reverted"
      - name: Send Build Notification
        script: |
          #!/usr/bin/env bash
          set -e
          echo "üìß Sending build notification..."

          # Send email notification
          bash lib/scripts/combined/send_error_email.sh "Build Complete" "Combined build process completed successfully"

          echo "‚úÖ Build notification sent"
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - ios/build/ios/ipa/Runner.ipa
      - build/ios/ipa/Runner.ipa
      - build/ios/archive/Runner.xcarchive
      - output/
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: false
          failure: false
