# Common environment variables for all workflows
# These can be overridden by API calls with dynamic values
# Proper handling of API data with null/default values for optional fields
environment: &default_env
  flutter: stable
  xcode: latest
  cocoapods: default
  vars:
    # App Configuration - Required from API
    VERSION_NAME: "${VERSION_NAME}"
    VERSION_CODE: "${VERSION_CODE}"
    APP_NAME: "${APP_NAME}"
    ORG_NAME: "${ORG_NAME}"
    WEB_URL: "${WEB_URL}"
    PKG_NAME: "${PKG_NAME}"
    BUNDLE_ID: "${BUNDLE_ID}"
    EMAIL_ID: "${EMAIL_ID}"

    # Feature Flags - API configurable with proper defaults
    PUSH_NOTIFY: "${PUSH_NOTIFY}"
    IS_CHATBOT: "${IS_CHATBOT}"
    IS_DEEPLINK: "${IS_DEEPLINK}"
    IS_SPLASH: "${IS_SPLASH}"
    IS_PULLDOWN: "${IS_PULLDOWN}"
    IS_BOTTOMMENU: "${IS_BOTTOMMENU}"
    IS_LOAD_IND: "${IS_LOAD_IND}"

    # Permissions - API configurable with secure defaults (all false unless specified)
    IS_CAMERA: "${IS_CAMERA}"
    IS_LOCATION: "${IS_LOCATION}"
    IS_MIC: "${IS_MIC}"
    IS_NOTIFICATION: "${IS_NOTIFICATION}"
    IS_CONTACT: "${IS_CONTACT}"
    IS_BIOMETRIC: "${IS_BIOMETRIC}"
    IS_CALENDAR: "${IS_CALENDAR}"
    IS_STORAGE: "${IS_STORAGE}"

    # Assets - API configurable with empty defaults for optional fields
    LOGO_URL: "${LOGO_URL}"
    SPLASH: "${SPLASH}"
    SPLASH_BG: "${SPLASH_BG}"
    SPLASH_BG_COLOR: "${SPLASH_BG_COLOR}"
    SPLASH_TAGLINE: "${SPLASH_TAGLINE}"
    SPLASH_TAGLINE_COLOR: "${SPLASH_TAGLINE_COLOR}"
    SPLASH_ANIMATION: "${SPLASH_ANIMATION}"
    SPLASH_DURATION: "${SPLASH_DURATION}"

    # Bottom Menu Configuration - API configurable with empty defaults
    BOTTOMMENU_ITEMS: "${BOTTOMMENU_ITEMS}"
    BOTTOMMENU_BG_COLOR: "${BOTTOMMENU_BG_COLOR}"
    BOTTOMMENU_ICON_COLOR: "${BOTTOMMENU_ICON_COLOR}"
    BOTTOMMENU_TEXT_COLOR: "${BOTTOMMENU_TEXT_COLOR}"
    BOTTOMMENU_FONT: "${BOTTOMMENU_FONT}"
    BOTTOMMENU_FONT_SIZE: "${BOTTOMMENU_FONT_SIZE}"
    BOTTOMMENU_FONT_BOLD: "${BOTTOMMENU_FONT_BOLD}"
    BOTTOMMENU_FONT_ITALIC: "${BOTTOMMENU_FONT_ITALIC}"
    BOTTOMMENU_ACTIVE_TAB_COLOR: "${BOTTOMMENU_ACTIVE_TAB_COLOR}"
    BOTTOMMENU_ICON_POSITION: "${BOTTOMMENU_ICON_POSITION}"
    BOTTOMMENU_VISIBLE_ON: "${BOTTOMMENU_VISIBLE_ON}"

    # Firebase Configuration - API required for push notifications
    firebase_config_android: "${firebase_config_android}"
    firebase_config_ios: "${firebase_config_ios}"

    # iOS Configuration - API required for iOS builds
    APPLE_TEAM_ID: "${APPLE_TEAM_ID}"
    APNS_KEY_ID: "${APNS_KEY_ID}"
    APNS_AUTH_KEY_URL: "${APNS_AUTH_KEY_URL}"
    CERT_PASSWORD: "${CERT_PASSWORD}"
    PROFILE_URL: "${PROFILE_URL}"
    CERT_CER_URL: "${CERT_CER_URL}"
    CERT_KEY_URL: "${CERT_KEY_URL}"
    APP_STORE_CONNECT_KEY_IDENTIFIER: "${APP_STORE_CONNECT_KEY_IDENTIFIER}"
    IPHONEOS_DEPLOYMENT_TARGET: "${IPHONEOS_DEPLOYMENT_TARGET}"
    COCOAPODS_PLATFORM: "${COCOAPODS_PLATFORM}"
    EXPORT_METHOD: "${EXPORT_METHOD}"
    IS_DEVELOPMENT_PROFILE: "${IS_DEVELOPMENT_PROFILE}"
    IS_PRODUCTION_PROFILE: "${IS_PRODUCTION_PROFILE}"

    # Android Configuration - API required for Android builds
    KEY_STORE: "${KEY_STORE}"
    CM_KEYSTORE_PASSWORD: "${CM_KEYSTORE_PASSWORD}"
    CM_KEY_ALIAS: "${CM_KEY_ALIAS}"
    CM_KEY_PASSWORD: "${CM_KEY_PASSWORD}"
    COMPILE_SDK_VERSION: "${COMPILE_SDK_VERSION}"
    MIN_SDK_VERSION: "${MIN_SDK_VERSION}"
    TARGET_SDK_VERSION: "${TARGET_SDK_VERSION}"

    # iOS Permissions - API configurable with defaults
    IS_PHOTO_LIBRARY: "${IS_PHOTO_LIBRARY}"
    IS_PHOTO_LIBRARY_ADD: "${IS_PHOTO_LIBRARY_ADD}"
    IS_FACE_ID: "${IS_FACE_ID}"
    IS_TOUCH_ID: "${IS_TOUCH_ID}"

    # Email Configuration - Optional with defaults
    SMTP_SERVER: "${SMTP_SERVER}"
    SMTP_PORT: "${SMTP_PORT}"
    SMTP_USERNAME: "${SMTP_USERNAME}"
    SMTP_PASSWORD: "${SMTP_PASSWORD}"

scripts:
  - &debug_env
    name: Debug Environment Variables
    script: |
      #!/usr/bin/env bash
      set -e
      echo "🔍 Debugging environment variables..."

      # Function to safely print sensitive variables
      print_var() {
        local var_name=$1
        local var_value=${!var_name}
        if [[ $var_name == *"PASSWORD"* ]] || [[ $var_name == *"KEY"* ]]; then
          echo "$var_name: [REDACTED]"
        else
          echo "$var_name: $var_value"
        fi
      }

      echo "*********** App Name & Version ***********"
      print_var "APP_NAME"
      print_var "ORG_NAME"
      print_var "WEB_URL"
      print_var "VERSION_NAME"
      print_var "VERSION_CODE"
      print_var "PKG_NAME"
      print_var "BUNDLE_ID"

      echo "*********** App Customization Configuration ***********"
      print_var "IS_SPLASH"
      print_var "IS_PULLDOWN"
      print_var "IS_LOAD_IND"
      print_var "IS_BOTTOMMENU"
      print_var "IS_DEEPLINK"

      echo "*********** Push Notification Configuration ***********"
      print_var "PUSH_NOTIFY"
      print_var "IS_CHATBOT"

      echo "*********** Android Configuration ***********"
      print_var "KEY_STORE"
      print_var "CM_KEYSTORE_PASSWORD"
      print_var "CM_KEY_ALIAS"
      print_var "CM_KEY_PASSWORD"
      print_var "COMPILE_SDK_VERSION"
      print_var "MIN_SDK_VERSION"
      print_var "TARGET_SDK_VERSION"

      echo "*********** iOS Configuration ***********"
      print_var "APP_STORE_CONNECT_KEY_IDENTIFIER"
      print_var "APNS_KEY_ID"
      print_var "APPLE_TEAM_ID"
      print_var "APNS_AUTH_KEY_URL"
      print_var "IPHONEOS_DEPLOYMENT_TARGET"
      print_var "EXPORT_METHOD"

      echo "*********** Firebase Configuration ***********"
      print_var "firebase_config_android"
      print_var "firebase_config_ios"

      echo "*********** Splash Configuration ***********"
      print_var "SPLASH"
      print_var "SPLASH_BG"
      print_var "SPLASH_BG_COLOR"
      print_var "SPLASH_TAGLINE"
      print_var "SPLASH_TAGLINE_COLOR"
      print_var "SPLASH_ANIMATION"
      print_var "SPLASH_DURATION"

      echo "*********** Bottom Navigation Configuration ***********"
      print_var "BOTTOMMENU_ITEMS"
      print_var "BOTTOMMENU_BG_COLOR"
      print_var "BOTTOMMENU_ICON_COLOR"
      print_var "BOTTOMMENU_TEXT_COLOR"
      print_var "BOTTOMMENU_FONT"
      print_var "BOTTOMMENU_FONT_SIZE"
      print_var "BOTTOMMENU_FONT_BOLD"
      print_var "BOTTOMMENU_FONT_ITALIC"
      print_var "BOTTOMMENU_ACTIVE_TAB_COLOR"
      print_var "BOTTOMMENU_ICON_POSITION"
      print_var "BOTTOMMENU_VISIBLE_ON"

      echo "*********** Permissions ***********"
      print_var "IS_CAMERA"
      print_var "IS_LOCATION"
      print_var "IS_MIC"
      print_var "IS_NOTIFICATION"
      print_var "IS_CONTACT"
      print_var "IS_BIOMETRIC"
      print_var "IS_CALENDAR"
      print_var "IS_STORAGE"
      print_var "IS_PHOTO_LIBRARY"
      print_var "IS_PHOTO_LIBRARY_ADD"
      print_var "IS_FACE_ID"
      print_var "IS_TOUCH_ID"

      echo "*********** Email Configuration ***********"
      print_var "EMAIL_ID"
      print_var "SMTP_SERVER"
      print_var "SMTP_PORT"
      print_var "SMTP_USERNAME"
      print_var "SMTP_PASSWORD"

      echo "✅ Environment variables debug complete"

workflows:
  android-publish:
    name: Android Publish
    environment: *default_env
    scripts:
      - name: Force Gradle Wrapper Version
        script: |
          cat > android/gradle/wrapper/gradle-wrapper.properties <<EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-all.zip
          EOF
          echo "✅ Forced gradle-wrapper.properties to Gradle 8.12"
      - *debug_env
      - name: Get Flutter packages
        script: flutter pub get
      - name: Initialize Android Gradle Wrapper
        script: |
          #!/usr/bin/env bash
          set -e
          echo "🔧 Initializing Android Gradle Wrapper for compatibility..."

          cd android

          # Check Java availability
          echo "🔍 Checking Java installation..."
          if ! command -v java >/dev/null 2>&1; then
              echo "❌ Java is not installed or not in PATH"
              exit 1
          fi

          JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')
          echo "✅ Java version: $JAVA_VERSION"

          # Create gradle wrapper directory if it doesn't exist
          mkdir -p gradle/wrapper

          # Download gradle-wrapper.jar
          echo "📥 Downloading gradle-wrapper.jar..."
          curl -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.12.0/gradle/wrapper/gradle-wrapper.jar

          # Create gradle-wrapper.properties
          echo "📝 Creating gradle-wrapper.properties..."
          cat > gradle/wrapper/gradle-wrapper.properties <<EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-bin.zip
          networkTimeout=10000
          validateDistributionUrl=true
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

          # Make gradlew executable
          chmod +x gradlew

          # Verify the wrapper setup
          echo "🔍 Verifying Gradle wrapper setup..."
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
              echo "❌ gradle-wrapper.jar not found"
              exit 1
          fi

          if [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
              echo "❌ gradle-wrapper.properties not found"
              exit 1
          fi

          echo "✅ Gradle wrapper initialization complete"
      - name: Validate Android Project Structure
        script: |
          #!/usr/bin/env bash
          set -e
          echo "🔍 Validating Android project structure..."

          # Check critical Android files
          REQUIRED_FILES=(
              "android/app/build.gradle"
              "android/build.gradle"
              "android/gradle.properties"
              "android/settings.gradle"
          )

          for file in "${REQUIRED_FILES[@]}"; do
              if [ ! -f "$file" ]; then
                  echo "❌ Missing required file: $file"
                  exit 1
              else
                  echo "✅ Found: $file"
              fi
          done

          # Ensure Android SDK versions are compatible
          echo "🔧 Checking Android SDK compatibility for API 35..."

          # Check if build.gradle has proper compileSdkVersion
          if grep -q "compileSdkVersion.*3[5-9]" android/app/build.gradle; then
              echo "✅ Compatible compileSdkVersion found"
          else
              echo "⚠️  May need compileSdkVersion update for Android 15"
          fi

          echo "✅ Android project structure validated"
      - name: Run Android build script
        script: |
          #!/usr/bin/env bash
          set -e
          echo "🚀 Running Android build using comprehensive script system..."

          # Set workflow name for email notifications
          export WORKFLOW_NAME="Android Publish"

          # Check if we have the comprehensive Android main.sh script
          if [ -f "lib/scripts/android/main.sh" ]; then
              echo "🎯 Using comprehensive Android main.sh script..."
              chmod +x lib/scripts/android/main.sh
              ./lib/scripts/android/main.sh
          else
              echo "⚠️  Android main.sh not found, using enhanced fallback build process..."
              
              # Enhanced Fallback: Set up Android code signing
              echo "🔐 Setting up Android code signing..."
              if [ -n "$KEY_STORE" ]; then
                  echo "📥 Downloading keystore..."
                  wget -O android/app/keystore.jks "$KEY_STORE"
                  cat > android/key.properties << EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          storeFile=keystore.jks
          EOF
                  echo "✅ Keystore configured"
              fi
              
              # Build APK and AAB with comprehensive error handling
              echo "🏗️ Building Android APK and AAB..."
              
              # Build APK with retry mechanism
              echo "📱 Building APK..."
              if ! flutter build apk --release \
                --dart-define=PKG_NAME="$PKG_NAME" \
                --dart-define=APP_NAME="$APP_NAME" \
                --dart-define=ORG_NAME="$ORG_NAME" \
                --dart-define=VERSION_NAME="$VERSION_NAME" \
                --dart-define=VERSION_CODE="$VERSION_CODE" \
                --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
                --dart-define=firebase_config_android="$firebase_config_android" \
                --dart-define=WEB_URL="$WEB_URL" \
                --dart-define=IS_SPLASH="$IS_SPLASH" \
                --dart-define=SPLASH="$SPLASH" \
                --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
                --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
                --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
                --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
                --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
                --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
                --dart-define=LOGO_URL="$LOGO_URL" \
                --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
                --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
                --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
                --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
                --dart-define=IS_CHATBOT="$IS_CHATBOT" \
                --dart-define=IS_CAMERA="$IS_CAMERA" \
                --dart-define=IS_LOCATION="$IS_LOCATION" \
                --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
                --dart-define=IS_MIC="$IS_MIC" \
                --dart-define=IS_CONTACT="$IS_CONTACT" \
                --dart-define=IS_CALENDAR="$IS_CALENDAR" \
                --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
                --dart-define=IS_STORAGE="$IS_STORAGE"; then
                
                echo "❌ APK build failed, trying with clean..."
                flutter clean
                flutter pub get
                
                flutter build apk --release \
                  --dart-define=PKG_NAME="$PKG_NAME" \
                  --dart-define=APP_NAME="$APP_NAME" \
                  --dart-define=VERSION_NAME="$VERSION_NAME" \
                  --dart-define=VERSION_CODE="$VERSION_CODE" \
                  --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"
              fi
              
              # Build AAB
              echo "📦 Building AAB..."
              flutter build appbundle --release \
                --dart-define=PKG_NAME="$PKG_NAME" \
                --dart-define=APP_NAME="$APP_NAME" \
                --dart-define=ORG_NAME="$ORG_NAME" \
                --dart-define=VERSION_NAME="$VERSION_NAME" \
                --dart-define=VERSION_CODE="$VERSION_CODE" \
                --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
                --dart-define=firebase_config_android="$firebase_config_android" \
                --dart-define=WEB_URL="$WEB_URL" \
                --dart-define=IS_SPLASH="$IS_SPLASH" \
                --dart-define=SPLASH="$SPLASH" \
                --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
                --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
                --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
                --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
                --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
                --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
                --dart-define=LOGO_URL="$LOGO_URL" \
                --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
                --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
                --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
                --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
                --dart-define=IS_CHATBOT="$IS_CHATBOT" \
                --dart-define=IS_CAMERA="$IS_CAMERA" \
                --dart-define=IS_LOCATION="$IS_LOCATION" \
                --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
                --dart-define=IS_MIC="$IS_MIC" \
                --dart-define=IS_CONTACT="$IS_CONTACT" \
                --dart-define=IS_CALENDAR="$IS_CALENDAR" \
                --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
                --dart-define=IS_STORAGE="$IS_STORAGE"
              
              # Move outputs
              echo "📁 Moving build outputs..."
              mkdir -p output
              
              # Check for APK
              if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
                  cp build/app/outputs/flutter-apk/app-release.apk output/
                  echo "✅ APK moved to output/"
              else
                  echo "⚠️  APK not found at expected location"
                  find build/ -name "*.apk" -type f | head -5
              fi
              
              # Check for AAB
              if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
                  cp build/app/outputs/bundle/release/app-release.aab output/
                  echo "✅ AAB moved to output/"
              else
                  echo "⚠️  AAB not found at expected location"
                  find build/ -name "*.aab" -type f | head -5
              fi
              
              echo "📋 Final output contents:"
              ls -la output/ || echo "No output directory"
          fi
      - name: Send success notification
        script: |
          #!/usr/bin/env bash
          set -e
          echo "📧 Sending success notification..."

          if [ -f "lib/scripts/email_notification.py" ] && [ -n "$SMTP_USERNAME" ] && [ -n "$SMTP_PASSWORD" ]; then
              chmod +x lib/scripts/email_notification.py
              python3 lib/scripts/email_notification.py success
              echo "✅ Success notification sent"
          else
              echo "ℹ️  Email notification skipped (script not found or email not configured)"
          fi
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - output/
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: false
          failure: false

  ios-publish:
    name: iOS Publish
    environment: *default_env
    scripts:
      - name: Force Gradle Wrapper Version
        script: |
          cat > android/gradle/wrapper/gradle-wrapper.properties <<EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-all.zip
          EOF
          echo "✅ Forced gradle-wrapper.properties to Gradle 8.12"
      - *debug_env
      - name: Get Flutter packages
        script: flutter pub get
      - name: Validate iOS Environment
        script: |
          #!/usr/bin/env bash
          set -e
          echo "🔍 Validating iOS build environment..."

          # Check Xcode version compatibility
          XCODE_VERSION=$(xcodebuild -version | grep "Xcode" | awk '{print $2}')
          echo "📱 Xcode Version: $XCODE_VERSION"

          # Check iOS Simulator availability
          echo "📱 Available iOS Simulators:"
          xcrun simctl list devices ios | grep -E "(iPhone|iPad)" | head -3

          # Check required iOS files
          REQUIRED_IOS_FILES=(
              "ios/Runner.xcodeproj/project.pbxproj"
              "ios/Runner/Info.plist"
              "ios/Podfile"
          )

          for file in "${REQUIRED_IOS_FILES[@]}"; do
              if [ ! -f "$file" ]; then
                  echo "❌ Missing required iOS file: $file"
                  exit 1
              else
                  echo "✅ Found: $file"
              fi
          done

          # Check iOS deployment target
          if grep -q "IPHONEOS_DEPLOYMENT_TARGET.*13\|14\|15\|16\|17" ios/Runner.xcodeproj/project.pbxproj; then
              echo "✅ Compatible iOS deployment target found"
          else
              echo "⚠️  iOS deployment target may need update for latest iOS versions"
          fi

          echo "✅ iOS environment validated"
      - name: Setup iOS Dependencies
        script: |
          #!/usr/bin/env bash
          set -e
          echo "📦 Setting up iOS dependencies with enhanced compatibility..."

          cd ios

          # Ensure Podfile exists and is properly configured
          if [ ! -f "Podfile" ]; then
              echo "⚠️  Podfile not found, creating optimized version..."
              cat > Podfile << EOF
          platform :ios, '$IPHONEOS_DEPLOYMENT_TARGET'
          use_frameworks! :linkage => :static

          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end

            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
          end

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

          flutter_ios_podfile_setup

          target 'Runner' do
            use_frameworks!
            use_modular_headers!

            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '$IPHONEOS_DEPLOYMENT_TARGET'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64' if config.build_settings['SDKROOT'] == 'iphoneos'
              end
            end
          end
          EOF
              echo "✅ Created optimized Podfile"
          else
              # Update existing Podfile deployment target
              if grep -q "platform :ios" Podfile; then
                  sed -i.bak "s/platform :ios, '[^']*'/platform :ios, '$IPHONEOS_DEPLOYMENT_TARGET'/" Podfile
                  echo "✅ Updated platform to iOS $IPHONEOS_DEPLOYMENT_TARGET"
              fi
          fi

          # Clean and install pods with retry mechanism
          echo "🧹 Cleaning previous CocoaPods installation..."
          rm -rf Pods/ Podfile.lock

          echo "📦 Installing CocoaPods dependencies..."

          # Retry mechanism for pod install
          for i in {1..3}; do
              if pod install --repo-update; then
                  echo "✅ CocoaPods installation successful"
                  break
              else
                  echo "⚠️  Pod install attempt $i failed"
                  if [ $i -eq 3 ]; then
                      echo "❌ Pod install failed after 3 attempts"
                      exit 1
                  fi
                  echo "🔄 Retrying in 10 seconds..."
                  sleep 10
              fi
          done

          cd ..
          echo "✅ iOS dependencies setup complete"
      - name: Run iOS build script
        script: |
          #!/usr/bin/env bash
          set -e
          echo "🚀 Running iOS build using comprehensive script system..."

          # Set workflow name for email notifications
          export WORKFLOW_NAME="iOS Publish"

          # Source environment variables from export.sh first
          if [ -f "lib/scripts/ios/export.sh" ]; then
              echo "📋 Sourcing iOS environment variables..."
              source lib/scripts/ios/export.sh
          fi

          # Check if we have the comprehensive iOS main.sh script
          if [ -f "lib/scripts/ios/main.sh" ]; then
              echo "🎯 Using comprehensive iOS main.sh script..."
              # Set workflow name for email notifications
              export WORKFLOW_NAME="Combined Android & iOS Build"
              chmod +x lib/scripts/ios/main.sh
              ./lib/scripts/ios/main.sh
          else
              echo "⚠️  iOS main.sh not found, using enhanced fallback build process..."
              
              # Enhanced iOS code signing setup
              echo "🔐 Setting up iOS code signing..."
              KEYCHAIN_NAME="build.keychain"
              KEYCHAIN_PASSWORD="temporary"

              # Create keychain with better error handling
              if ! security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"; then
                  echo "⚠️  Keychain creation failed, trying with cleanup..."
                  security delete-keychain "$KEYCHAIN_NAME" || true
                  security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
              fi
              
              security default-keychain -s "$KEYCHAIN_NAME"
              security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
              security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

              # Download and setup certificates with validation
              if [ -n "$CERT_CER_URL" ] && [ -n "$CERT_KEY_URL" ]; then
                  echo "📥 Downloading certificates..."
                  
                  if wget -O ios/distribution.cer "$CERT_CER_URL" && wget -O ios/privatekey.key "$CERT_KEY_URL"; then
                      echo "✅ Certificates downloaded"
                      
                      # Convert to P12 with error handling
                      if openssl pkcs12 -export -out ios/certificate.p12 -inkey ios/privatekey.key -in ios/distribution.cer -password pass:"$CERT_PASSWORD"; then
                          echo "✅ P12 certificate created"
                          
                          # Import certificate
                          if security import ios/certificate.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign; then
                              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
                              echo "✅ Certificate imported successfully"
                          else
                              echo "⚠️  Certificate import failed, continuing without code signing"
                          fi
                      else
                          echo "⚠️  P12 conversion failed, continuing without code signing"
                      fi
                  else
                      echo "⚠️  Certificate download failed, continuing without code signing"
                  fi
              fi

              # Setup provisioning profile
              if [ -n "$PROFILE_URL" ]; then
                  echo "📥 Downloading provisioning profile..."
                  if wget -O ios/profile.mobileprovision "$PROFILE_URL"; then
                      mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                      
                      # Extract profile info with error handling
                      PROFILE_PLIST=$(mktemp)
                      if security cms -D -i ios/profile.mobileprovision > "$PROFILE_PLIST"; then
                          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$PROFILE_PLIST" 2>/dev/null || echo "")
                          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$PROFILE_PLIST" 2>/dev/null || echo "")
                          
                          if [ -n "$UUID" ] && [ -n "$PROFILE_NAME" ]; then
                              cp ios/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$UUID".mobileprovision
                              echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
                              echo "PROFILE_UUID=$UUID" >> $CM_ENV
                              echo "✅ Provisioning profile installed: $PROFILE_NAME"
                          else
                              echo "⚠️  Could not extract profile info, continuing..."
                          fi
                      else
                          echo "⚠️  Profile parsing failed, continuing..."
                      fi
                      rm -f "$PROFILE_PLIST"
                  else
                      echo "⚠️  Profile download failed, continuing..."
                  fi
              fi

              # Create ExportOptions.plist with better defaults
              cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>$EXPORT_METHOD</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$BUNDLE_ID</key>
              <string>\${PROFILE_NAME:-match AppStore $BUNDLE_ID}</string>
            </dict>
            <key>compileBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
          </dict>
          </plist>
          EOF

              # Build iOS with comprehensive dart-define and error handling
              echo "🏗️ Building iOS app..."
              
              if ! flutter build ios --release --no-codesign \
                --dart-define=PKG_NAME="$PKG_NAME" \
                --dart-define=BUNDLE_ID="$BUNDLE_ID" \
                --dart-define=APP_NAME="$APP_NAME" \
                --dart-define=ORG_NAME="$ORG_NAME" \
                --dart-define=VERSION_NAME="$VERSION_NAME" \
                --dart-define=VERSION_CODE="$VERSION_CODE" \
                --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
                --dart-define=firebase_config_ios="$firebase_config_ios" \
                --dart-define=WEB_URL="$WEB_URL" \
                --dart-define=IS_SPLASH="$IS_SPLASH" \
                --dart-define=SPLASH="$SPLASH" \
                --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
                --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
                --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
                --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
                --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
                --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
                --dart-define=LOGO_URL="$LOGO_URL" \
                --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
                --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
                --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
                --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
                --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
                --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
                --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
                --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
                --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
                --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
                --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
                --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
                --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
                --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
                --dart-define=IS_CHATBOT="$IS_CHATBOT" \
                --dart-define=IS_CAMERA="$IS_CAMERA" \
                --dart-define=IS_LOCATION="$IS_LOCATION" \
                --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
                --dart-define=IS_MIC="$IS_MIC" \
                --dart-define=IS_CONTACT="$IS_CONTACT" \
                --dart-define=IS_CALENDAR="$IS_CALENDAR" \
                --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
                --dart-define=IS_STORAGE="$IS_STORAGE" \
                --dart-define=IS_PHOTO_LIBRARY="$IS_PHOTO_LIBRARY" \
                --dart-define=IS_PHOTO_LIBRARY_ADD="$IS_PHOTO_LIBRARY_ADD" \
                --dart-define=IS_FACE_ID="$IS_FACE_ID" \
                --dart-define=IS_TOUCH_ID="$IS_TOUCH_ID"; then
                
                echo "❌ iOS build failed, trying with clean..."
                flutter clean
                cd ios && pod install && cd ..
                flutter pub get
                
                # Retry with minimal configuration
                flutter build ios --release --no-codesign \
                  --dart-define=BUNDLE_ID="$BUNDLE_ID" \
                  --dart-define=APP_NAME="$APP_NAME" \
                  --dart-define=VERSION_NAME="$VERSION_NAME" \
                  --dart-define=VERSION_CODE="$VERSION_CODE"
              fi

              # Archive and export IPA with better error handling
              echo "📦 Archiving and exporting IPA..."
              
              # Load environment variables for profile info
              source $CM_ENV 2>/dev/null || true
              
              # Archive with error handling
              echo "🏗️ Creating Xcode archive..."
              if xcodebuild -workspace ios/Runner.xcworkspace \
                -scheme Runner \
                -configuration Release \
                -archivePath build/ios/archive/Runner.xcarchive \
                clean archive \
                CODE_SIGN_STYLE=Manual \
                DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
                PROVISIONING_PROFILE_SPECIFIER="${PROFILE_NAME:-}" \
                PROVISIONING_PROFILE="${PROFILE_UUID:-}" \
                PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                CODE_SIGN_IDENTITY="Apple Distribution" \
                IPHONEOS_DEPLOYMENT_TARGET="$IPHONEOS_DEPLOYMENT_TARGET" \
                OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_NAME"; then
                
                echo "✅ Archive created successfully"
                
                # Export IPA
                echo "📦 Exporting IPA..."
                if xcodebuild -exportArchive \
                  -archivePath build/ios/archive/Runner.xcarchive \
                  -exportPath build/ios/ipa \
                  -exportOptionsPlist ExportOptions.plist; then
                  
                  echo "✅ IPA exported successfully"
                else
                  echo "⚠️  IPA export failed, but archive was created"
                fi
              else
                echo "❌ Archive creation failed"
                echo "📋 Available build products:"
                find build/ -name "*.app" -type d | head -5
              fi

              # Copy artifacts to output folder
              echo "📁 Moving iOS artifacts..."
              mkdir -p output
              
              if [ -f "build/ios/ipa/Runner.ipa" ]; then
                  cp build/ios/ipa/Runner.ipa output/
                  echo "✅ IPA moved to output/"
              else
                  echo "⚠️  IPA not found, checking for .app files..."
                  find build/ -name "*.app" -type d | head -1 | xargs -I {} cp -r {} output/ 2>/dev/null || true
              fi
              
              # Cleanup keychain
              security delete-keychain "$KEYCHAIN_NAME" || true
              
              echo "📋 Final iOS output contents:"
              ls -la output/ || echo "No output directory"
          fi
      - name: Send success notification
        script: |
          #!/usr/bin/env bash
          set -e
          echo "📧 Sending success notification..."

          if [ -f "lib/scripts/email_notification.py" ] && [ -n "$SMTP_USERNAME" ] && [ -n "$SMTP_PASSWORD" ]; then
              chmod +x lib/scripts/email_notification.py
              python3 lib/scripts/email_notification.py success
              echo "✅ Success notification sent"
          else
              echo "ℹ️  Email notification skipped (script not found or email not configured)"
          fi
    artifacts:
      - build/ios/ipa/Runner.ipa
      - build/ios/archive/Runner.xcarchive
      - output/
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: false
          failure: false

  combined-workflow:
    name: Combined Android & iOS Build
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
      node: v18.17.0
      java: 17
      groups:
        - google_credentials
        - appstore_credentials
      vars:
        # App Configuration - Required from API
        VERSION_NAME: "${VERSION_NAME}"
        VERSION_CODE: "${VERSION_CODE}"
        APP_NAME: "${APP_NAME}"
        ORG_NAME: "${ORG_NAME}"
        WEB_URL: "${WEB_URL}"
        PKG_NAME: "${PKG_NAME}"
        BUNDLE_ID: "${BUNDLE_ID}"
        EMAIL_ID: "${EMAIL_ID}"

        # Feature Flags - API configurable
        PUSH_NOTIFY: "${PUSH_NOTIFY}"
        IS_CHATBOT: "${IS_CHATBOT}"
        IS_DEEPLINK: "${IS_DEEPLINK}"
        IS_SPLASH: "${IS_SPLASH}"
        IS_PULLDOWN: "${IS_PULLDOWN}"
        IS_BOTTOMMENU: "${IS_BOTTOMMENU}"
        IS_LOAD_IND: "${IS_LOAD_IND}"

        # Permissions - API configurable
        IS_CAMERA: "${IS_CAMERA}"
        IS_LOCATION: "${IS_LOCATION}"
        IS_MIC: "${IS_MIC}"
        IS_NOTIFICATION: "${IS_NOTIFICATION}"
        IS_CONTACT: "${IS_CONTACT}"
        IS_BIOMETRIC: "${IS_BIOMETRIC}"
        IS_CALENDAR: "${IS_CALENDAR}"
        IS_STORAGE: "${IS_STORAGE}"

        # Assets - API configurable
        LOGO_URL: "${LOGO_URL}"
        SPLASH: "${SPLASH}"
        SPLASH_BG: "${SPLASH_BG}"
        SPLASH_BG_COLOR: "${SPLASH_BG_COLOR}"
        SPLASH_TAGLINE: "${SPLASH_TAGLINE}"
        SPLASH_TAGLINE_COLOR: "${SPLASH_TAGLINE_COLOR}"
        SPLASH_ANIMATION: "${SPLASH_ANIMATION}"
        SPLASH_DURATION: "${SPLASH_DURATION}"

        # Bottom Menu Configuration - API configurable
        BOTTOMMENU_ITEMS: "${BOTTOMMENU_ITEMS}"
        BOTTOMMENU_BG_COLOR: "${BOTTOMMENU_BG_COLOR}"
        BOTTOMMENU_ICON_COLOR: "${BOTTOMMENU_ICON_COLOR}"
        BOTTOMMENU_TEXT_COLOR: "${BOTTOMMENU_TEXT_COLOR}"
        BOTTOMMENU_FONT: "${BOTTOMMENU_FONT}"
        BOTTOMMENU_FONT_SIZE: "${BOTTOMMENU_FONT_SIZE}"
        BOTTOMMENU_FONT_BOLD: "${BOTTOMMENU_FONT_BOLD}"
        BOTTOMMENU_FONT_ITALIC: "${BOTTOMMENU_FONT_ITALIC}"
        BOTTOMMENU_ACTIVE_TAB_COLOR: "${BOTTOMMENU_ACTIVE_TAB_COLOR}"
        BOTTOMMENU_ICON_POSITION: "${BOTTOMMENU_ICON_POSITION}"
        BOTTOMMENU_VISIBLE_ON: "${BOTTOMMENU_VISIBLE_ON}"

        # Firebase Configuration - API required for push notifications
        firebase_config_android: "${firebase_config_android}"
        firebase_config_ios: "${firebase_config_ios}"

        # iOS Configuration - API required for iOS builds
        APPLE_TEAM_ID: "${APPLE_TEAM_ID}"
        APNS_KEY_ID: "${APNS_KEY_ID}"
        APNS_AUTH_KEY_URL: "${APNS_AUTH_KEY_URL}"
        CERT_PASSWORD: "${CERT_PASSWORD}"
        PROFILE_URL: "${PROFILE_URL}"
        CERT_CER_URL: "${CERT_CER_URL}"
        CERT_KEY_URL: "${CERT_KEY_URL}"
        APP_STORE_CONNECT_KEY_IDENTIFIER: "${APP_STORE_CONNECT_KEY_IDENTIFIER}"
        IPHONEOS_DEPLOYMENT_TARGET: "${IPHONEOS_DEPLOYMENT_TARGET}"
        COCOAPODS_PLATFORM: "${COCOAPODS_PLATFORM}"
        EXPORT_METHOD: "${EXPORT_METHOD}"
        IS_DEVELOPMENT_PROFILE: "${IS_DEVELOPMENT_PROFILE}"
        IS_PRODUCTION_PROFILE: "${IS_PRODUCTION_PROFILE}"

        # Android Configuration - API required for Android builds
        KEY_STORE: "${KEY_STORE}"
        CM_KEYSTORE_PASSWORD: "${CM_KEYSTORE_PASSWORD}"
        CM_KEY_ALIAS: "${CM_KEY_ALIAS}"
        CM_KEY_PASSWORD: "${CM_KEY_PASSWORD}"
        COMPILE_SDK_VERSION: "${COMPILE_SDK_VERSION}"
        MIN_SDK_VERSION: "${MIN_SDK_VERSION}"
        TARGET_SDK_VERSION: "${TARGET_SDK_VERSION}"

        # iOS Permissions - API configurable
        IS_PHOTO_LIBRARY: "${IS_PHOTO_LIBRARY}"
        IS_PHOTO_LIBRARY_ADD: "${IS_PHOTO_LIBRARY_ADD}"
        IS_FACE_ID: "${IS_FACE_ID}"
        IS_TOUCH_ID: "${IS_TOUCH_ID}"

        # Email Configuration - Optional with defaults
        SMTP_SERVER: "${SMTP_SERVER}"
        SMTP_PORT: "${SMTP_PORT}"
        SMTP_USERNAME: "${SMTP_USERNAME}"
        SMTP_PASSWORD: "${SMTP_PASSWORD}"
    scripts:
      - name: Initialize Gradle Wrapper
        script: |
          echo "🔧 Initializing Gradle wrapper..."

          # Create Gradle wrapper directory
          mkdir -p android/gradle/wrapper

          # Download Gradle wrapper JAR
          curl -L -o android/gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.12.0/gradle/wrapper/gradle-wrapper.jar

          # Create gradle-wrapper.properties
          cat > android/gradle/wrapper/gradle-wrapper.properties << EOL
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-all.zip
          EOL

          # Create gradlew script
          cat > android/gradlew << EOL
          #!/bin/sh
          exec java -cp android/gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain "\$@"
          EOL

          # Make gradlew executable
          chmod +x android/gradlew

          # Verify Gradle wrapper
          ./android/gradlew --version

          echo "✅ Gradle wrapper initialized"
      - name: Get Flutter packages
        script: flutter pub get
      - name: Build Android (Using main.sh)
        script: |
          #!/usr/bin/env bash
          set -e
          echo "🤖 Building Android using comprehensive script system..."

          # Set workflow name for email notifications
          export WORKFLOW_NAME="Combined Android & iOS Build"

          # Check if we have the comprehensive Android main.sh script
          if [ -f "lib/scripts/android/main.sh" ]; then
              echo "🎯 Using comprehensive Android main.sh script..."
              chmod +x lib/scripts/android/main.sh
              ./lib/scripts/android/main.sh
          else
              echo "⚠️  Android main.sh not found, using enhanced fallback..."
              
              # Validate Android project structure
              echo "🔍 Validating Android project..."
              REQUIRED_FILES=(
                  "android/app/build.gradle"
                  "android/build.gradle"
                  "android/gradle.properties"
                  "android/settings.gradle"
              )
              
              for file in "${REQUIRED_FILES[@]}"; do
                  if [ ! -f "$file" ]; then
                      echo "❌ Missing required Android file: $file"
                      exit 1
                  fi
              done
              
              # Enhanced Android setup and build
              if [ -n "$KEY_STORE" ]; then
                  echo "🔐 Setting up Android keystore..."
                  wget -O android/app/keystore.jks "$KEY_STORE"
                  cat > android/key.properties << EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          storeFile=keystore.jks
          EOF
                  echo "✅ Android keystore configured"
              fi
              
              echo "🏗️ Building Android APK and AAB..."
              
              # Build with retry mechanism
              if ! flutter build apk --release \
                --dart-define=PKG_NAME="$PKG_NAME" \
                --dart-define=APP_NAME="$APP_NAME" \
                --dart-define=VERSION_NAME="$VERSION_NAME" \
                --dart-define=VERSION_CODE="$VERSION_CODE" \
                --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
                --dart-define=WEB_URL="$WEB_URL" \
                --dart-define=IS_SPLASH="$IS_SPLASH" \
                --dart-define=SPLASH="$SPLASH" \
                --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
                --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS"; then
                
                echo "❌ Android APK build failed, retrying with clean..."
                flutter clean
                flutter pub get
                flutter build apk --release \
                  --dart-define=PKG_NAME="$PKG_NAME" \
                  --dart-define=APP_NAME="$APP_NAME" \
                  --dart-define=VERSION_NAME="$VERSION_NAME" \
                  --dart-define=VERSION_CODE="$VERSION_CODE" \
                  --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"
              fi
              
              flutter build appbundle --release \
                --dart-define=PKG_NAME="$PKG_NAME" \
                --dart-define=APP_NAME="$APP_NAME" \
                --dart-define=VERSION_NAME="$VERSION_NAME" \
                --dart-define=VERSION_CODE="$VERSION_CODE" \
                --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
                --dart-define=WEB_URL="$WEB_URL" \
                --dart-define=IS_SPLASH="$IS_SPLASH" \
                --dart-define=SPLASH="$SPLASH" \
                --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
                --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS"
              
              echo "✅ Android builds completed"
          fi
      - name: Setup iOS Dependencies
        script: |
          #!/usr/bin/env bash
          set -e
          echo "📦 Setting up iOS dependencies for combined build..."

          cd ios

          # Create or update Podfile
          if [ ! -f "Podfile" ]; then
              echo "📄 Creating optimized Podfile..."
              cat > Podfile << EOF
          platform :ios, '$IPHONEOS_DEPLOYMENT_TARGET'
          use_frameworks! :linkage => :static

          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end

            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found"
          end

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

          flutter_ios_podfile_setup

          target 'Runner' do
            use_frameworks!
            use_modular_headers!
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '$IPHONEOS_DEPLOYMENT_TARGET'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
              end
            end
          end
          EOF
          fi

          # Clean and install with retry
          echo "🧹 Cleaning iOS dependencies..."
          rm -rf Pods/ Podfile.lock

          echo "📦 Installing iOS dependencies..."
          for i in {1..2}; do
              if pod install --repo-update; then
                  echo "✅ iOS dependencies installed successfully"
                  break
              else
                  if [ $i -eq 2 ]; then
                      echo "❌ Pod install failed, but continuing..."
                      break
                  fi
                  echo "🔄 Retrying pod install..."
                  sleep 5
              fi
          done

          cd ..
      - name: Build iOS (Using main.sh)
        script: |
          #!/usr/bin/env bash
          set -e
          echo "🍎 Building iOS using comprehensive script system..."

          # Source environment variables from export.sh first
          if [ -f "lib/scripts/ios/export.sh" ]; then
              echo "📋 Sourcing iOS environment variables..."
              source lib/scripts/ios/export.sh
          fi

          # Check if we have the comprehensive iOS main.sh script
          if [ -f "lib/scripts/ios/main.sh" ]; then
              echo "🎯 Using comprehensive iOS main.sh script..."
              # Set workflow name for email notifications
              export WORKFLOW_NAME="Combined Android & iOS Build"
              chmod +x lib/scripts/ios/main.sh
              ./lib/scripts/ios/main.sh
          else
              echo "⚠️  iOS main.sh not found, using streamlined fallback..."
              
              # Streamlined iOS build for combined workflow
              echo "🏗️ Building iOS app..."
              
              if ! flutter build ios --release --no-codesign \
                --dart-define=BUNDLE_ID="$BUNDLE_ID" \
                --dart-define=APP_NAME="$APP_NAME" \
                --dart-define=VERSION_NAME="$VERSION_NAME" \
                --dart-define=VERSION_CODE="$VERSION_CODE" \
                --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
                --dart-define=WEB_URL="$WEB_URL" \
                --dart-define=IS_SPLASH="$IS_SPLASH" \
                --dart-define=SPLASH="$SPLASH" \
                --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
                --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS"; then
                
                echo "❌ iOS build failed, retrying with minimal config..."
                flutter clean
                cd ios && pod install && cd ..
                flutter pub get
                
                flutter build ios --release --no-codesign \
                  --dart-define=BUNDLE_ID="$BUNDLE_ID" \
                  --dart-define=APP_NAME="$APP_NAME" \
                  --dart-define=VERSION_NAME="$VERSION_NAME" \
                  --dart-define=VERSION_CODE="$VERSION_CODE"
              fi
              
              echo "✅ iOS build completed"
          fi
      - name: Copy all artifacts to output folder
        script: |
          #!/usr/bin/env bash
          set -e
          echo "📁 Collecting all build artifacts..."

          # Create output directory
          mkdir -p output

          # Copy Android artifacts with validation
          echo "🤖 Checking Android artifacts..."
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
              cp build/app/outputs/flutter-apk/app-release.apk output/
              echo "✅ Android APK copied to output/"
          else
              echo "⚠️  Android APK not found at expected location"
              find build/ -name "*.apk" -type f | head -3
          fi

          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
              cp build/app/outputs/bundle/release/app-release.aab output/
              echo "✅ Android AAB copied to output/"
          else
              echo "⚠️  Android AAB not found at expected location"
              find build/ -name "*.aab" -type f | head -3
          fi

          # Copy iOS artifacts with validation
          echo "🍎 Checking iOS artifacts..."
          if [ -f "build/ios/ipa/Runner.ipa" ]; then
              cp build/ios/ipa/Runner.ipa output/
              echo "✅ iOS IPA copied to output/"
          else
              echo "⚠️  iOS IPA not found, checking for alternatives..."
              # Look for .app files as fallback
              APP_FILE=$(find build/ -name "*.app" -type d | head -1)
              if [ -n "$APP_FILE" ]; then
                  cp -r "$APP_FILE" output/
                  echo "✅ iOS .app copied to output/"
              else
                  echo "⚠️  No iOS artifacts found"
              fi
          fi

          echo "📋 Final Build Summary:"
          echo "======================="
          if [ -d "output" ]; then
              ls -la output/
              echo ""
              echo "📱 Android Files:"
              ls output/*.apk 2>/dev/null && echo "  ✅ APK found" || echo "  ❌ APK missing"
              ls output/*.aab 2>/dev/null && echo "  ✅ AAB found" || echo "  ❌ AAB missing"
              echo "🍎 iOS Files:"
              ls output/*.ipa 2>/dev/null && echo "  ✅ IPA found" || echo "  ❌ IPA missing"
              ls output/*.app 2>/dev/null && echo "  ✅ APP found" || echo "  ❌ APP missing"
          else
              echo "❌ No output directory created"
          fi
      - name: Send success notification
        script: |
          #!/usr/bin/env bash
          set -e
          echo "📧 Sending combined build success notification..."

          if [ -f "lib/scripts/email_notification.py" ] && [ -n "$SMTP_USERNAME" ] && [ -n "$SMTP_PASSWORD" ]; then
              chmod +x lib/scripts/email_notification.py
              python3 lib/scripts/email_notification.py success
              echo "✅ Success notification sent for combined build"
          else
              echo "ℹ️  Email notification skipped (script not found or email not configured)"
          fi
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - build/ios/ipa/Runner.ipa
      - build/ios/archive/Runner.xcarchive
      - output/
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: false
          failure: false
